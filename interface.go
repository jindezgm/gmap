/*
 * @Author: jinde.zgm
 * @Date: 2020-07-23 20:51:38
 * @Descripttion:
 */

package gmap

// MapEventType is the type of watching map events
type MapEventType int

const (
	// PUT event will be generated when data is stored to the map
	PUT MapEventType = 0
	// DELETE event will be generated when data is deleted from the map.
	DELETE MapEventType = 1
)

// MapEvent is watched events generated by map
type MapEvent struct {
	// Type is the kind of event. If type is a PUT, it indicates new data has been stored to the key.
	// If type is a DELETE, it indicates the key was deleted.
	Type MapEventType
	// KV holds the KeyValue for the event.
	// A PUT event contains current kv pair.
	// A DELETE event contains the deleted key with its modification revision set to the revision of deletion.
	KV *KeyValue
	// PrevKV holds the key-value pair before the event happens.
	PrevKV *KeyValue
}

// KeyValue is key-value pair.
type KeyValue struct {
	Key   string
	Value interface{}
}

// Watcher watch the specific map and output map event.
type Watcher interface {
	// WatchChan return a channel which output MapEvent.
	WatchChan() <-chan MapEvent
	// Close closes the watcher.
	Close()
}

// TryUpdateFunc is used for Map.GuaranteedUpdate.
// Pass an TryUpdateFunc to Map.GuaranteedUpdate to make an update than is guaranteed to succeed.
// See the comment for GuaranteedUpdate for more detail.
type TryUpdateFunc func(input interface{}) (output interface{}, err error)

// Map is no different from ordinary map, except that the key must be of string type
type Map interface {
	// Name get map name, distinguish different maps by name in gmap.
	Name() string
	// Get returns the value stored in the map for a key, or nil if no value is present.
	// The bool result indicates whether value was found in the map.
	Get(key string) (interface{}, bool)
	// Put sets the value for a key, because the put proposal needs to be approved through raft,
	// errors may occur.
	Put(key string, value interface{}) error
	// Delete teh value for a key and return previous value.
	Delete(key string) (interface{}, error)
	// Range calls f sequentially for each key and value present in the map.
	// If f returns false, range stops the iteration.
	Range(f func(key string, value interface{}) bool)
	// GuaranteedUpdate keeps calling 'tryUpdate()' to update key 'key' retrying the update
	// util success if there is revision conflict.
	GuaranteedUpdate(key string, tryUpdate TryUpdateFunc) error
	// Watch watches on the map, the watched events will be returned through the watcher channel.
	Watch() Watcher
}

// Interface define gmap interfaces.
type Interface interface {
	// Leader get the leader ID, -1 if no leader.
	Leader() int
	// Map get map named 'name' and value type is 'value'.
	Map(value interface{}, name string) (Map, error)
	// Close the gmap.
	Close()
}
